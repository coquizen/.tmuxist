# : <<EOF

#   ________  _____  ___  __    ____  ___   _____ ______
#  /_  __/  |/  / / / / |/ /   / __ )/   | / ___// ____/
#   / / / /|_/ / / / /|   /   / __  / /| | \__ \/ __/   
#  / / / /  / / /_/ //   |   / /_/ / ___ |___/ / /___   
# /_/ /_/  /_/\____//_/|_|  /_____/_/  |_/____/_____/   
#    __________  _   __________________
#   / ____/ __ \/ | / /  _/ ____/ ____/
#  / /   / / / /  |/ // // /_  / / __  
# / /___/ /_/ / /|  // // __/ / /_/ /  
# \____/\____/_/ |_/___/_/    \____/   

# DO NOT EDIT THIS FILE.
# Use ~/.tmux.conf.local and ~/.tmux.conf.remote to change tmux behavior.
                                     
#    _____      __  __  _                 
#   / ___/___  / /_/ /_(_)___  ____ ______
#   \__ \/ _ \/ __/ __/ / __ \/ __ `/ ___/
#  ___/ /  __/ /_/ /_/ / / / / /_/ (__  ) 
# /____/\___/\__/\__/_/_/ /_/\__, /____/  
#                           /____/        

# General. =====================================================================

# increase scrollback buffer
set-option -g history-limit 50000

# Visuals. =====================================================================

# Set tmux to use colors.
set-option -g default-terminal "screen-256color" # colors!
# Start counting windows at 1.
set-option -g base-index 1

# Renumber windows when window is closed.
set-option -g renumber-windows on

# Rename window to reflect current program.
set-option -w -g automatic-rename off

# Expect UTF-8 (tmux < 2.2).
set-option -q -g status-utf8 on
set-option -w -q -g utf8 on

# Status bar. ------------------------------------------------------------------

# Bar length.
set -g status-left-length 60
set -g status-right-length 150

# Disable visual and bell notifications.
set-option -g monitor-activity off
set-option -g visual-activity off

# Redraw status bar.
set-option -g status-interval 10

# Status bar default colors.
set-option -g status-style fg=colour7,bg=colour0

# Status bar window list colors.
set-option -g window-status-style fg=black,bg=white

# Status bar delimiters.
#  U+e0b0
#  U+e0b1
#  U+e0b2
#  U+e0b3

# Status bar left.
# Shows wether pane is zoomed and wether prefix is pressed.
set-option -g status-left "\
#[fg=colour0, bg=colour7]#{?client_prefix,#[bg=colour1],} ❐ #S \
#[fg=colour7, bg=colour0]#{?client_prefix,#[fg=colour1],}\
#[fg=colour3]#{?window_zoomed_flag,  ,}"

# Current window format.
set-window-option -g window-status-format "\
#[fg=colour0, bg=colour8,noitalics]\
#[fg=colour0, bg=colour8] #I \
#[fg=colour0, bg=colour8] #W \
#[fg=colour8, bg=colour0]"

# Window list format.
set-window-option -g window-status-current-format "\
#[fg=colour0, bg=colour2]\
#[fg=colour0, bg=colour2] #I \
#[fg=colour0, bg=colour2] #W \
#[fg=colour2, bg=colour0]"

# Status bar right.
# Shows wether prefix is used for local session or will be handled by nested
# remote session.
# Also shows wether panes are in sync or not.
set-option -g status-right "\
#[fg=colour7,bold, bg=colour0]#{?pane_synchronized,  ,}\
#[fg=colour3, bg=colour0]#{?pane_synchronized,SYNCED,}\
#[fg=colour7, bg=colour0]#{?tmux_keytable,  ,}\
#[fg=colour3, bg=colour0]#{?tmux_keytable,REMOTE,}\
#[fg=colour4, bg=colour0]  %d.%m.%Y\
#[fg=colour1]  %H:%M\
#[fg=#{?tmux_user_root,colour1,colour7},nobold, bg=colour0] \
#[fg=colour0, bg=#{?tmux_user_root,colour1,colour7}] #(cut -c3- ~/.tmux.conf | sh -s _username)\
#[fg=colour8, bg=#{?tmux_user_root,colour1,colour7}] \
#[fg=colour0, bg=colour8] #(cut -c3- ~/.tmux.conf | sh -s _hostname) "

# Navigation. ==================================================================

# Set Prefix key.
unbind-key 'C-b'
set-option -g prefix 'C-k'

# Set vi mode.
set-window-option -g mode-keys vi

# Enable emacs bindings in command mode.
set-option -g status-keys emacs

# Commands. ====================================================================

# Edit configuration.
bind-key e new-window -n "~/.tmux.conf.local" "EDITOR=\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf reloaded.\""

# Reload configuration.
bind-key r source-file ~/.tmux.conf \; display '~/.tmux.conf reloaded.'

#     ____  _           ___                 
#    / __ )(_)___  ____/ (_)___  ____ ______
#   / __  / / __ \/ __  / / __ \/ _ ``/ ___/
#  / /_/ / / / / / /_/ / / / / / /_/ (__  ) 
# /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/  
#                             /____/        

# Useful Default Keybindings. ==================================================

# bind-key n next-window
# bind-key p previous-window
# bind-key w choose-tree -w
# bind-key s choose-tree -s
# bind-key o rotate-window
# bind-key f find-window

# Custom Keybindings. ==========================================================

# Panes. -----------------------------------------------------------------------

# Pane movement.
bind-key h select-pane -L\; refresh-client -S
bind-key j select-pane -D\; refresh-client -S
bind-key k select-pane -U\; refresh-client -S
bind-key l select-pane -R\; refresh-client -S

# Pane resizing.
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Split window into panes.
unbind-key '"'
bind-key v split-window -h -c '#{pane_current_path}'\; refresh-client -S
unbind-key '%'
bind-key - split-window -v -c '#{pane_current_path}'\; refresh-client -S

# Kill current pane.
bind-key x kill-pane\; refresh-client -S

# Syncronize panes.
bind S set-window-option synchronize-panes

# Windows. ---------------------------------------------------------------------

# Create new window next to curret window.
bind-key c new-window -a\; refresh-client -S

# Switch to last used window.
bind-key Tab last-window

# Window movement.
bind-key 1 select-window -t:1\; refresh-client -S
bind-key 2 select-window -t:2\; refresh-client -S
bind-key 3 select-window -t:3\; refresh-client -S
bind-key 4 select-window -t:4\; refresh-client -S
bind-key 5 select-window -t:5\; refresh-client -S
bind-key 6 select-window -t:6\; refresh-client -S
bind-key 7 select-window -t:7\; refresh-client -S
bind-key 8 select-window -t:8\; refresh-client -S
bind-key 9 select-window -t:9\; refresh-client -S

# Keymaps. ---------------------------------------------------------------------

# Toogle keymap to work in nested remote tmux session.
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

# Copy Mode. -------------------------------------------------------------------

# Enter/leave vim copy mode.
bind-key Enter copy-mode
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi q send -X cancel

# Vim selection mode.
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line

# Copy to Wayland clipboard.
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | wl-copy < \"${1:-/dev/stdin}\""'
# Copy to X11 clipboard.
if -b 'command -v xsel > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | xsel -i -b"'

# Paste from Wayland clipboard.
if -b 'command -v wl-paste > /dev/null 2>&1' 'bind-key p run -b "tmux set-buffer \"$(wl-paste -n)\" && tmux paste-buffer"'
# Paste from Wayland clipboard.
if -b 'command -v xclip > /dev/null 2>&1' 'bind-key p run -b "tmux set-buffer \"$(xclip -o)\" &&  tmux paste-buffer"'

# -- buffers -------------------------------------------------------------------

bind-key b list-buffers  # list paste buffers
bind-key P choose-buffer # choose which buffer to paste from

# Nice stuff. ------------------------------------------------------------------

# Urlview.
bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

# Load user overrides.
source-file -q ~/.tmux.conf.local

#     ____                       __     
#    / __ \___  ____ ___  ____  / /____ 
#   / /_/ / _ \/ __ `__ \/ __ \/ __/ _ \
#  / _, _/  __/ / / / / / /_/ / /_/  __/
# /_/ |_|\___/_/ /_/ /_/\____/\__/\___/ 
#   ____ __      ______ _________  ____  ___  __________
#  / __ `/ | /| / / __ `/ ___/ _ \/ __ \/ _ \/ ___/ ___/
# / /_/ /| |/ |/ / /_/ / /  /  __/ / / /  __(__  |__  ) 
# \__,_/ |__/|__/\__,_/_/   \___/_/ /_/\___/____/____/  

# Set indicator for keymap.
run-shell 'tmux set-environment -g tmux_keytable \
    $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
    then echo 1; else echo 0; fi)'

# Load settings for remote session.
if-shell 'test -n "$SSH_CLIENT"' 'source-file -q ~/.tmux.conf.remote'

#     ______                 __  _                 
#    / ____/_  ______  _____/ /_(_)___  ____  _____
#   / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
#  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  ) 
# /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/  

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# eval "$(cut -c3- ~/.tmux.conf.local)"
# _read_function_overrides() {
#     eval "$(cut -c3- ~/.tmux.conf.local)"
# }
#
# _is_ssh() {
#     cmdline="${1}"
#     if ! type _is_ssh_override > /dev/null 2>&1; then
#         if [ -z "${cmdline##*ssh *}" ]; then
#             return 0
#         else
#             return 1
#         fi
#     else
#         _is_ssh_override
#     fi
# }
#
# _ssh_stats() {
#     cmdline="${1}"
#     if ! type _ssh_stats_override > /dev/null 2>&1; then
#         ssh_args="${cmdline#ssh }"
#         user_host="$(\
#             # shellcheck disable=SC2086
#             ssh -G ${ssh_args} |\
#             awk '(/^user /) {
#                 user=$2
#             }
#             (/^hostname /) {
#                 hostname=$2
#             } END {
#                 print user":"hostname
#                 exit
#             }
#         ')"
#
#         printf '%s' "${user_host}"
#     else
#         _ssh_stats_override
#     fi
# }
#
# _tty_stats() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _tty_stats_override > /dev/null 2>&1; then
#         ps -t "${tty}" -o user=WIDEOUTPUTFORLONGNAME -o pid= -o ppid= -o command= | awk '
#             NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#                 users[$2] = $1; parents[$2] = $3; children[$3] = $2; pid=$2; $1 = $2 = $3 = ""; commands[pid] = substr($0,4)
#             } END {
#                 for (ppid in parents) {
#                     pid = ppid
#                     while (parents[pid])
#                     pid = parents[pid]
#
#                     if (!(ppid in children) && pid != 1) {
#                         print ppid":"users[ppid]":"commands[ppid]
#                         exit
#                     }
#                 }
#             }
#         '
#     else
#         _tty_stats_override
#     fi
# }
#
# _username() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _username_override > /dev/null 2>&1; then
#         tty_stats="$(_tty_stats "${tty}")"
#         username="${tty_stats#*:}"
#         cmdline="${username#*:}"
#         username="${username%%:*}"
#         if _is_ssh "${cmdline}";then
#             ssh_stats="$(_ssh_stats "${cmdline}")"
#             printf '%s' "${ssh_stats%%:*}"
#         else
#             if [ "${username}" = "caffeinate" ];then
#                 username="$(hostname)"
#             fi
#             printf '%s' "${username}"
#         fi
#     else
#         _username_override "${tty}"
#     fi
#     if [ "${username}" = "root" ]; then
#         tmux set-environment -g tmux_user_root 'root'
#     else
#         tmux set-environment -g tmux_user_root ''
#     fi
# }
#
# _hostname() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _hostname_override > /dev/null 2>&1; then
#         tty_stats="$(_tty_stats "${tty}")"
#         cmdline="${tty_stats#*:}"
#         cmdline="${cmdline#*:}"
#         printf 'nope'
#         if _is_ssh "${cmdline}";then
#             ssh_stats="$(_ssh_stats "${cmdline}")"
#             printf '%s' "${ssh_stats##*:}"
#         else
#             printf '%s' "$(uname -n)"
#         fi
#     else
#         _hostname_override "${tty}"
#     fi
# }
#
# _urlview() {
#     pane_id="$1"
#     if ! type _urlview_override > /dev/null 2>&1; then
#         tmux capture-pane -J -S 0 -E - -b "urlview-${pane_id}" -t "${pane_id}"
#         tmux split-window -h -l '40%' "tmux show-buffer -b urlview-${pane_id} | urlview || true; tmux delete-buffer -b urlview-${pane_id}"
#     else
#         _urlview_override
#     fi
# }
#
# "$@"
